<!--
   DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
  
   Copyright (c) 2006 Sun Microsystems Inc. All Rights Reserved
  
   The contents of this file are subject to the terms
   of the Common Development and Distribution License
   (the License). You may not use this file except in
   compliance with the License.

   You can obtain a copy of the License at
   https://opensso.dev.java.net/public/CDDLv1.0.html or
   opensso/legal/CDDLv1.0.txt
   See the License for the specific language governing
   permission and limitations under the License.

   When distributing Covered Code, include this CDDL
   Header Notice in each file and include the License file
   at opensso/legal/CDDLv1.0.txt.
   If applicable, add the following below the CDDL Header,
   with the fields enclosed by brackets [] replaced by
   your own identifying information:
   "Portions Copyrighted [year] [name of copyright owner]"

   $Id: build.xml,v 1.27 2009/07/09 17:04:16 veiming Exp $

-->

<project name="Open Federation Library" default="usage">
                
    <description>Open Federation</description>
    <import file="../../products.xml" />
    <import file="library.xml" />

    <fail message="*** jdk target is not set ***">
        <condition>
            <not><isset property="target.jdk.set"/></not>
        </condition>
    </fail>

    <property name="libtracker" value="${library.basedir}/tracker.properties" />
    <touch file="${libtracker}" />

    <!-- user specific properties -->
    <property file="${user.home}/.opensso"/>

    <!-- overridable properties -->
    <property name="build.debug" value="on"/>
    <property name="build.debuglevel" value="lines,vars,source"/>

    <condition property="target.jdk.set" value="${target.jdk}">
        <isset property="target.jdk"/>
    </condition>
    <condition property="target.jdk.set" value="1.5">
        <not><isset property="target.jdk"/></not>
    </condition>
    <echo message="OpenSSO JDK Version: ${target.jdk.set}"/>

    <property name="fedlibrary.clientsdkbase.dir" value="${library.basedir}/clientsdk"/>

    <!-- build class path -->
    <path id="build.class.path">
        <pathelement location="${sharedlib.classes.dir}"/>
        <pathelement location="${library.classes.dir}"/>
        <fileset dir="${extlib.dir}">
            <include name="**/*.jar"/>
            <exclude name="webservices-api.jar"/>
            <exclude name="webservices-rt.jar"/>
            <exclude name="webservices-tools.jar"/>
        </fileset>
        <fileset dir="${library.extlib.dir}">
            <include name="**/*.jar"/>
        </fileset>
    </path>

    <target name="xsd.liberty" depends="preparebuild" unless="library.xsd.liberty.done">
        <property name="xsd.liberty.dir" value="${library.xsd.dir}/liberty"/>
        <property name="xsd.liberty.files" value="${xsd.liberty.dir}/lib-id-sis-pp.xsd ${xsd.liberty.dir}/lib-arch-metadata.xsd ${xsd.liberty.dir}/idff-entity-config-schema.xsd ${xsd.liberty.dir}/lib-arch-disco-svc.xsd ${xsd.liberty.dir}/lib-arch-interact-svc.xsd ${xsd.liberty.dir}/lib-arch-paos.xsd ${xsd.liberty.dir}/lib-arch-soap-binding.xsd ${xsd.liberty.dir}/lib-arch-security-fmwk.xsd ${xsd.liberty.dir}/secext.xsd ${xsd.liberty.dir}/discoentry.xsd ${xsd.liberty.dir}/ppextension.xsd ${xsd.liberty.dir}/lib-idwsf-authn-svc.xsd ${xsd.liberty.dir}/liberty-idwsf-disco-svc-v1.1.xsd ${xsd.liberty.dir}/liberty-idwsf-soap-binding-v1.1.xsd"/>
        <java classname="com.sun.tools.xjc.Driver" 
            maxmemory="128m" failonerror="true" fork="true">
            <classpath refid="build.class.path"/>
            <arg line="-b ${xsd.liberty.dir}/binding.xjb -extension -d ${library.src.dir} ${xsd.liberty.files}"/> 
        </java>
        <property name="library.xsd.liberty.done" value="true" />
        <concat destfile="${libtracker}" append="true">library.xsd.liberty.done=true&#10;</concat>
    </target>

    <target name="xsd.saml2" depends="preparebuild" unless="library.xsd.saml2.done">
        <property name="xsd.saml2.dir" value="${library.xsd.dir}/saml2"/>
        <property name="xsd.saml2.files" value="${xsd.saml2.dir}/entity-config-schema.xsd ${xsd.saml2.dir}/saml-schema-assertion-2.0.xsd ${xsd.saml2.dir}/saml-schema-metadata-2.0.xsd  ${xsd.saml2.dir}/schema.xsd ${xsd.saml2.dir}/sstc-saml-metadata-ext-query.xsd ${xsd.saml2.dir}/sstc-saml-metadata-x509-query.xsd"/>
        <java classname="com.sun.tools.xjc.Driver" 
            maxmemory="128m" failonerror="true" fork="true">
            <classpath refid="build.class.path"/>
            <arg line="-b ${xsd.saml2.dir}/binding.xjb -extension -d ${library.src.dir} ${xsd.saml2.files}"/> 
        </java>
        <replace file="${jaxb.saml2}/metadata/impl/RoleDescriptorTypeImpl.java" token="&quot;&quot;, &quot;type&quot;" value="&quot;http://www.w3.org/2001/XMLSchema-instance&quot;, &quot;type&quot;"/>
        <replace file="${jaxb.saml2}/metadata/impl/RoleDescriptorTypeImpl.java" token="(&quot;type&quot; == ___local)&amp;&amp;(&quot;&quot; == ___uri)" value="(&quot;type&quot; == ___local)&amp;&amp;(&quot;http://www.w3.org/2001/XMLSchema-instance&quot; == ___uri)"/>
        <property name="library.xsd.saml2.done" value="true" />
        <concat destfile="${libtracker}" append="true">library.xsd.saml2.done=true&#10;</concat>
    </target>

    <target name="xsd.wsfederation" depends="preparebuild" unless="library.xsd.wsfederation.done">
        <property name="xsd.wsfederation.dir" value="${library.xsd.dir}/wsfederation"/>
        <property name="xsd.wsfederation.catalog" value="${xsd.wsfederation.dir}/catalog.xml"/>
        <property name="xsd.wsfederation.files" value="${xsd.wsfederation.dir}/xmldsig-core-schema.xsd ${xsd.wsfederation.dir}/oasis-200401-wss-wssecurity-utility-1.0.xsd ${xsd.wsfederation.dir}/oasis-200401-wss-wssecurity-secext-1.0.xsd
${xsd.wsfederation.dir}/ws-addr.xsd ${xsd.wsfederation.dir}/ws-policy.xsd ${xsd.wsfederation.dir}/ws-securitypolicy-1.2.xsd ${xsd.wsfederation.dir}/ws-federation.xsd ${xsd.wsfederation.dir}/entity-config-schema.xsd" />
        <java classname="com.sun.tools.xjc.Driver" 
            maxmemory="128m" failonerror="true" fork="true">
            <classpath refid="build.class.path"/>
            <arg line="-b ${xsd.wsfederation.dir}/binding.xjb -extension -verbose -d ${library.src.dir} ${xsd.wsfederation.files}"/> 
        </java>
        <property name="library.xsd.wsfederation.done" value="true" />
        <concat destfile="${libtracker}" append="true">library.xsd.wsfederation.done=true&#10;</concat>
    </target>

    <target name="jaxb.properties" unless="library.jaxb.done">
        <copy todir="${library.classes.dir}">
            <fileset dir="${library.src.dir}">
                <include name="**/jaxb.properties" />
                <include name="**/bgm.ser" />
            </fileset>
        </copy>
        <property name="library.jaxb.done" value="true" />
        <concat destfile="${libtracker}" append="true">library.jaxb.done=true&#10;</concat>
    </target>

    <target name="compile" depends="preparebuild">
	<javac memoryInitialSize="256m" memoryMaximumSize="512m" fork="true"
            destdir="${library.classes.dir}"
            source="${target.jdk.set}" target="${target.jdk.set}"
	    debug="${build.debug}" debuglevel="${build.debuglevel}">
            <src path="${library.src.dir}"/>
            <classpath refid="build.class.path"/>
	</javac>
    </target>

    <target name="nightly">
        <antcall target="unittest" />
        <antcall target="clientsdk" />
        <filter token="DATE" value="${nightly.date}" />
        <copy file="${library.docs.dir}/nightly.html" tofile="${fedlibrary.dist.dir}/index.html" filtering="true" />
    </target>

    <target name="build" depends="preparebuild, xsd.liberty, xsd.saml2, xsd.wsfederation">
         <javac memoryInitialSize="256m" memoryMaximumSize="512m" fork="true"
            destdir="${library.classes.dir}"
            source="${target.jdk.set}" target="${target.jdk.set}"
            debug="${build.debug}" debuglevel="${build.debuglevel}"
            srcdir="${library.src.dir}" >
            <classpath refid="build.class.path"/>
            <compilerarg value="-Xlint:deprecation" />
        </javac>

        <antcall target="jaxb.properties" />

        <antcall target="jaxrpc" />

        <tstamp>
            <format property="touch.time" pattern="yyyy-MMMM-d hh:mm"/>
        </tstamp>

        <jar destfile="${fedlibrary.dist.dir}/openfedlib.jar">
            <manifest>
                <attribute name="Version" value="${version}"/>
                <attribute name="Create-On" value="${touch.time}"/>
            </manifest>
            <fileset dir=".">
                <include name="license.txt" />
            </fileset>
            <fileset dir="${library.xml.dir}" includes="*.xml" />
            <zipfileset dir="${library.classes.dir}"
                excludes="com/sun/identity/saml2/idpdiscovery/*.class" />
        </jar>

        <checksum file="${fedlibrary.dist.dir}/openfedlib.jar" 
            algorithm="SHA" fileext=".sha" />

        <jar destfile="${fedlibrary.dist.dir}/idpdiscovery.jar">
            <manifest>
                <attribute name="Version" value="${version}"/>
                <attribute name="Create-On" value="${touch.time}"/>
            </manifest>
            <fileset dir=".">
                <include name="license.txt" />
            </fileset>
            <zipfileset dir="${library.classes.dir}"
                includes="com/sun/identity/saml2/idpdiscovery/*.class" />
        </jar>

        <checksum file="${fedlibrary.dist.dir}/idpdiscovery.jar"
            algorithm="SHA" fileext=".sha" />
    </target>

    <target name="jaxrpc" unless="library.jaxrpc.done">
        <java classname="com.sun.xml.rpc.tools.wscompile.Main" fork="true">
            <classpath refid="build.class.path"/>
            <classpath>
                <pathelement path="${java.home}/../lib/tools.jar"/>
            </classpath>
            <arg value="-classpath" />
            <arg value="${library.classes.dir}:${extlib.dir}/jaxrpc-api.jar:${extlib.dir}/jaxrpc-impl.jar:${extlib.dir}/saaj-api.jar" />
            <arg value="-gen:server" />
            <arg value="-d" />
            <arg value="${library.classes.dir}" />
            <arg value="${library.xml.dir}/jaxrpc-assertmgr-config.xml" />
        </java>
        <move file="${library.classes.dir}/AssertionManagerService.wsdl" tofile="${library.classes.dir}/jaxrpc/AssertionManagerService.wsdl" />

        <java classname="com.sun.xml.rpc.tools.wscompile.Main" fork="true">
            <classpath refid="build.class.path"/>
            <classpath>
                <pathelement path="${java.home}/../lib/tools.jar"/>
            </classpath>
            <arg value="-classpath" />
            <arg value="${library.classes.dir}:${extlib.dir}/jaxrpc-api.jar:${extlib.dir}/jaxrpc-impl.jar:${extlib.dir}/saaj-api.jar" />
            <arg value="-gen:server" />
            <arg value="-d" />
            <arg value="${library.classes.dir}" />
            <arg value="${library.xml.dir}/jaxrpc-fsassertmgr-config.xml" />
        </java>
        <move file="${library.classes.dir}/FSAssertionManagerService.wsdl" tofile="${library.classes.dir}/jaxrpc/FSAssertionManagerService.wsdl" />

        <java classname="com.sun.xml.rpc.tools.wscompile.Main" fork="true">
            <classpath refid="build.class.path"/>
            <classpath>
                <pathelement path="${java.home}/../lib/tools.jar"/>
            </classpath>
            <arg value="-classpath" />
            <arg value="${library.classes.dir}:${extlib.dir}/jaxrpc-api.jar:${extlib.dir}/jaxrpc-impl.jar:${extlib.dir}/saaj-api.jar" />
            <arg value="-gen:server" />
            <arg value="-d" />
            <arg value="${library.classes.dir}" />
            <arg value="${library.xml.dir}/jaxrpc-securitytokenmgr-config.xml" />
        </java>
        <move file="${library.classes.dir}/SecurityTokenManagerService.wsdl" tofile="${library.classes.dir}/jaxrpc/SecurityTokenManagerService.wsdl" />

        <java classname="com.sun.xml.rpc.tools.wscompile.Main" fork="true">
            <classpath refid="build.class.path"/>
            <classpath>
                <pathelement path="${java.home}/../lib/tools.jar"/>
            </classpath>
            <arg value="-classpath" />
            <arg value="${library.classes.dir}:${extlib.dir}/jaxrpc-api.jar:${extlib.dir}/jaxrpc-impl.jar:${extlib.dir}/saaj-api.jar" />
            <arg value="-gen:server" />
            <arg value="-d" />
            <arg value="${library.classes.dir}" />
            <arg value="${library.xml.dir}/jaxrpc-libertymanager-config.xml" />
        </java>
        <move file="${library.classes.dir}/LibertyManagerService.wsdl" tofile="${library.classes.dir}/jaxrpc/LibertyManagerService.wsdl" />
        <property name="library.jaxrpc.done" value="true" />
        <concat destfile="${libtracker}" append="true">library.jaxrpc.done=true&#10;</concat>
    </target>

    <target name="clientsdk" depends="build">
        <ant antfile="${fedlibrary.clientsdkbase.dir}/build.xml" inheritRefs="true"/>
    </target>

    <target name="clientsdk-clean">
        <ant antfile="${fedlibrary.clientsdkbase.dir}/build.xml"
            inheritRefs="true" target="clean"/>
    </target>

    <target name="doc" depends="preparebuild">
        <javadoc maxmemory="512m" destdir="${library.built.apidocs.dir}" 
            windowtitle="Open Federation API" failonerror="true">
            <classpath refid="build.class.path"/>
            <packageset dir="${library.src.dir}">
                <include name="com/sun/identity/federation/**"/>
                <include name="com/sun/identity/liberty/ws/**"/>
                <include name="com/sun/identity/plugin/**"/>
                <include name="com/sun/identity/saml/**"/>
                <include name="com/sun/identity/saml2/**"/>
                <include name="com/sun/identity/sae/**"/>
                <include name="com/sun/identity/wsfederation/**"/>
                <include name="com/sun/identity/multiprotocol/**"/>
                <include name="com/sun/identity/xacml/**"/>
                <include name="com/sun/liberty/**"/>
            </packageset>
            <tag name="supported.all.api" description="" />
            <tag name="supported.api" description="" />
            <link href="http://java.sun.com/j2se/1.5.0/docs/api"/>
            <link href="http://java.sun.com/j2ee/sdk_1.3/techdocs/api/"/>
        </javadoc>
    </target>

    <target name="publicdoc" depends="preparebuild">
        <javadoc maxmemory="512m" destdir="${library.built.publicapidocs.dir}"
                 windowtitle="Public Open Federation API" failonerror="true">
            <classpath refid="build.class.path"/>
            <packageset dir="${library.src.dir}">
                <include name="com/sun/identity/federation/**"/>
                <include name="com/sun/identity/liberty/ws/**"/>
                <include name="com/sun/identity/plugin/**"/>
                <include name="com/sun/identity/saml/**"/>
                <include name="com/sun/identity/saml2/**"/>
                <include name="com/sun/identity/sae/**"/>
                <include name="com/sun/identity/wsfederation/**"/>
                <include name="com/sun/identity/xacml/**"/>
                <include name="com/sun/liberty/**"/>
            </packageset>
            <doclet name="com.sun.identity.tools.javadocs.SupportedAPIDoclet"
                    path="${library.classes.dir}" />
            <tag name="supported.all.api" description="" />
            <tag name="supported.api" description="" />
            <link href="http://java.sun.com/j2se/1.5.0/docs/api"/>
            <link href="http://java.sun.com/j2ee/sdk_1.3/techdocs/api/"/>
        </javadoc>
    </target>

    <target name="checklib">
        <ant antfile="${library.basedir}/check-library-jars.xml" inheritRefs="true" />
        <fail message="*** missing library ***">
            <condition>
                <isset property="extlib.jar.exists"/>
            </condition>
        </fail>
    </target>

    <target name="preparebuild" depends="checklib">
        <mkdir dir="${library.built.dir}"/>
        <mkdir dir="${fedlibrary.dist.dir}" />
        <mkdir dir="${library.classes.dir}"/>
        <mkdir dir="${library.built.docs.dir}"/>
        <mkdir dir="${library.built.apidocs.dir}"/>
        <mkdir dir="${library.built.publicapidocs.dir}"/>
    </target>

    <target name="clean" depends="unittest-clean,clientsdk-clean">
        <delete dir="${jaxb.liberty.authnsvc}"/>
        <delete dir="${jaxb.liberty.common}"/>
        <delete dir="${jaxb.liberty.disco.plugins}"/>
        <delete dir="${jaxb11.liberty.disco}"/>
        <delete dir="${jaxb.liberty.disco}"/>
        <delete dir="${jaxb.liberty.idpp.plugins}"/>
        <delete dir="${jaxb.liberty.idpp}"/>
        <delete dir="${jaxb.liberty.interaction}"/>
        <delete dir="${jaxb.liberty.meta}"/>
        <delete dir="${jaxb.liberty.meta.entityconfig}"/>
        <delete dir="${jaxb.liberty.paos}"/>
        <delete dir="${jaxb.liberty.soapbinding}"/>
        <delete dir="${jaxb11.liberty.soapbinding}"/>
        <delete dir="${jaxb.w3c}"/>
        <delete dir="${jaxb.saml2}"/>
        <delete dir="${jaxb.wsfederation}"/>
        <delete dir="${library.built.publicapidocs.dir}"/>
        <delete dir="${library.built.apidocs.dir}"/>
        <delete dir="${library.built.docs.dir}"/>
        <delete dir="${library.classes.dir}/jaxrpc"/>
        <delete dir="${library.classes.dir}"/>
        <delete dir="${library.built.dir}"/>
        <delete file="${libtracker}"/>
    </target>

    <target name="unittest" depends="build">
        <ant antfile="${library.test.dir}/build.xml" target="all" inheritRefs="true"/>
    </target>

    <target name="unittest-clean">
        <ant antfile="${library.test.dir}/build.xml" inheritRefs="true" target="clean"/>
    </target>

    <target name="extlib-clean">
        <delete file="${library.extlib.dir}/opensso-sharedlib.jar"/>
    </target>

    <target name="cvsdiff">
        <mkdir dir="${library.built.diff.dir}" />
        <cvs command="-q diff -cw" output="${library.built.diff.dir}/.diffs"/>
        <java classname="com.sun.identity.tools.diffs.Diffs">
            <classpath refid="build.class.path"/>
            <arg value="${library.built.diff.dir}/.diffs"/>
        </java>
        <cvs command="-q stat" output="${library.built.diff.dir}/.stat"/>
        <java classname="com.sun.identity.tools.diffs.Stat">
            <classpath refid="build.class.path"/>
            <arg value="${library.built.diff.dir}/.stat"/>
        </java>
    </target>
  
    <target name="usage">
        <echo message=" "/>
        <echo message=" Following targets are available:"/>
        <echo message=" "/>
        <echo message=" nightly    : generates nightly build binaries"/>
        <echo message=" build      : compiles the sources"/>
        <echo message=" clientsdk  : creates client SDK jar file"/>
        <echo message=" unittest   : generates unit test zip file"/>
        <echo message=" publicdoc  : creates javadocs for publicly supported API"/>
        <echo message=" doc        : creates javadocs"/>
        <echo message=" clean      : deletes the generated files"/>
        <echo message=" clientsdk-clean : deletes the generated client SDK jar file"/>
        <echo message=" unittest-clean : deletes the generated unit test resources"/>
        <echo message=" extlib-clean   : deletes shared library under extlib"/>
        <echo message=" usage          : displays this usage message"/>
        <echo message=" "/>
        <echo message=" To run a target, issue the following command:"/>
        <echo message=" "/>
        <echo message=" ant &lt;target-name&gt;"/>
        <echo message=" "/>
    </target>

</project>
